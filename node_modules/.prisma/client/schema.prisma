generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cliente {
  id_cliente               Int                    @id @default(autoincrement())
  nombre                   String
  apellido                 String?
  email                    String                 @unique
  contrasena               String
  telefono                 String?
  direccion                String?
  fecha_registro           DateTime               @default(now())
  activo                   Boolean                @default(true)
  dni                      String? // Nuevo campo DNI para el cliente
  carritos                 Carrito[]
  pedidos                  Pedido[]
  direccionesFacturacion   DireccionFacturacion[] // Relación con DireccionFacturacion
  metodosPago              MetodoPagoCliente[] // Relación con MetodoPagoCliente
  email_verificado         Boolean                @default(false)
  token_verificacion_email String?
}

model DireccionFacturacion {
  id_direccion  Int      @id @default(autoincrement())
  id_cliente    Int
  cliente       Cliente  @relation(fields: [id_cliente], references: [id_cliente])
  dni           String
  calle         String
  numero        String?
  piso          String?
  departamento  String?
  ciudad        String
  codigo_postal String
  provincia     String
  pais          String
  es_principal  Boolean  @default(false)
  pedidos       Pedido[] // Relación con Pedido
}

model MetodoPagoCliente {
  id_metodo_pago         Int     @id @default(autoincrement())
  id_cliente             Int
  cliente                Cliente @relation(fields: [id_cliente], references: [id_cliente])
  // stripe_payment_method_id String? // ID de Stripe, ahora obsoleto y opcional. Se eliminó @unique. <- CAMPO ELIMINADO
  tipo_tarjeta           String // ej. "visa", "mastercard"
  ultimos_cuatro_digitos String
  fecha_expiracion       String // ej. "12/25"
  es_principal           Boolean @default(false)
}

model Rol {
  id_rol      Int              @id @default(autoincrement())
  nombre      String           @unique
  descripcion String?
  usuarios    UsuarioInterno[]
}

model UsuarioInterno {
  id_usuario Int     @id @default(autoincrement())
  nombre     String
  apellido   String?
  email      String  @unique
  contrasena String
  telefono   String?
  activo     Boolean @default(true)
  id_rol     Int
  rol        Rol     @relation(fields: [id_rol], references: [id_rol])
}

model TipoProducto {
  id_tipo     Int        @id @default(autoincrement())
  nombre      String     @unique
  descripcion String?
  productos   Producto[]
}

model Producto {
  id_producto               Int              @id @default(autoincrement())
  nombre                    String
  tipo                      String? // <-- ahora opcional
  descripcion               String?
  precio                    Float
  stock                     Int?
  activo                    Boolean          @default(true)
  alquiler                  Alquiler?
  Auto                      Auto?
  carritoItems              CarritoItem[]
  hospedaje                 Hospedaje?
  paqueteDetallesAsPaquete  PaqueteDetalle[] @relation("PaqueteDetallesPaquete")
  paqueteDetallesAsProducto PaqueteDetalle[] @relation("PaqueteDetallesProducto")
  pasaje                    Pasaje?
  pedidoItems               PedidoItem[]
  id_tipo                   Int?
  tipoProducto              TipoProducto?    @relation(fields: [id_tipo], references: [id_tipo])
}

model Hospedaje {
  id_hospedaje Int       @id @default(autoincrement())
  id_producto  Int       @unique
  ubicacion    String?
  fecha_inicio DateTime?
  fecha_fin    DateTime?
  capacidad    Int?
  producto     Producto  @relation(fields: [id_producto], references: [id_producto])
}

model Pasaje {
  id_pasaje            Int       @id @default(autoincrement())
  id_producto          Int       @unique
  producto             Producto  @relation(fields: [id_producto], references: [id_producto])
  origen               String?
  destino              String?
  fecha_salida         DateTime?
  fecha_regreso        DateTime? // Opcional, para vuelos de solo ida
  // clase                String? // ELIMINADO - La clase se manejará por la selección del usuario y afectará el precio en PedidoItem
  asientos_disponibles Int? // Podría ser el total de asientos vendibles para este vuelo específico
  aerolinea            String?

  id_avion_config Int? // FK Opcional a AvionConfig
  avionConfig     AvionConfig? @relation(fields: [id_avion_config], references: [id_avion_config])

  // El campo id_tipo_asiento y la relación tipoAsiento se eliminan de aquí.
  // La "clase de servicio" (Económica, Business, etc.) se seleccionará al comprar y se reflejará en el precio del PedidoItem.
  // El TipoAsiento se usará para definir las clases de servicio y las clases base de los asientos físicos.
  // Si un vuelo SOLO ofrece una clase, se puede modelar en la info del Producto o implicitamente.
}

model Alquiler {
  id_alquiler   Int       @id @default(autoincrement())
  id_producto   Int       @unique
  tipo_vehiculo String?
  ubicacion     String?
  fecha_inicio  DateTime?
  fecha_fin     DateTime?
  cantidad      Int       @default(0)
  producto      Producto  @relation(fields: [id_producto], references: [id_producto])
}

model PaqueteDetalle {
  id_detalle  Int      @id @default(autoincrement())
  id_paquete  Int
  id_producto Int
  cantidad    Int      @default(1)
  paquete     Producto @relation("PaqueteDetallesPaquete", fields: [id_paquete], references: [id_producto])
  producto    Producto @relation("PaqueteDetallesProducto", fields: [id_producto], references: [id_producto])
}

model Carrito {
  id_carrito     Int           @id @default(autoincrement())
  id_cliente     Int
  fecha_creacion DateTime      @default(now())
  cliente        Cliente       @relation(fields: [id_cliente], references: [id_cliente])
  items          CarritoItem[]
}

model CarritoItem {
  id_item     Int      @id @default(autoincrement())
  id_carrito  Int
  id_producto Int
  cantidad    Int      @default(1)
  carrito     Carrito  @relation(fields: [id_carrito], references: [id_carrito])
  producto    Producto @relation(fields: [id_producto], references: [id_producto])

  // Nuevo campo para detalles adicionales específicos del vuelo
  detalles_vuelo_json String? // Almacenará un JSON string con { seleccion_clase_servicio_id, seleccion_asiento_fisico_id, selecciones_equipaje }
}

model Pedido {
  id_pedido                Int                   @id @default(autoincrement())
  total                    Decimal
  estado                   String
  fecha_pedido             DateTime              @default(now())
  id_cliente               Int
  pagos                    Pago[]
  cliente                  Cliente               @relation(fields: [id_cliente], references: [id_cliente])
  items                    PedidoItem[]
  ventas                   Venta[] // Relación inversa
  id_direccion_facturacion Int?
  direccionFacturacion     DireccionFacturacion? @relation(fields: [id_direccion_facturacion], references: [id_direccion])
}

model PedidoItem {
  id_detalle           Int      @id @default(autoincrement())
  id_pedido            Int
  pedido               Pedido   @relation(fields: [id_pedido], references: [id_pedido])
  id_producto          Int
  producto             Producto @relation(fields: [id_producto], references: [id_producto])
  cantidad             Int
  precio_unitario_base Decimal  @default(0) // Precio del producto/vuelo base ANTES de adicionales de clase, asiento o equipaje.
  precio_total_item    Decimal  @default(0) // Precio final de este item (cantidad * (precio_unitario_base * multiplicador_clase + precio_asiento_seleccionado + sum(precios_equipaje)))

  // Para vuelos: Clase de servicio seleccionada
  id_clase_servicio_seleccionada Int? // FK a TipoAsiento (opcional, solo para items que son vuelos)
  claseServicioSeleccionada      TipoAsiento? @relation("ClaseServicioSeleccionada", fields: [id_clase_servicio_seleccionada], references: [id_tipo_asiento])

  // Para vuelos: Asiento seleccionado
  seleccion_asiento SeleccionAsientoPasajero? // Relación uno a uno (o cero) con la selección de asiento

  // Para vuelos (u otros productos): Equipaje adicional
  selecciones_equipaje SeleccionEquipajePasajero[]
}

model Pago {
  id_pago    Int      @id @default(autoincrement())
  id_pedido  Int
  fecha_pago DateTime @default(now())
  monto      Decimal
  metodo     String?
  estado     String
  pedido     Pedido   @relation(fields: [id_pedido], references: [id_pedido])
}

model ContactoInterno {
  id_contacto Int     @id @default(autoincrement())
  nombre      String
  email       String
  telefono    String?
  cargo       String?
}

model Auto {
  id_auto          Int      @id @default(autoincrement())
  id_producto      Int      @unique
  modelo           String?
  marca            String?
  capacidad        Int?
  ubicacion_actual String?
  estado           String
  Producto         Producto @relation(fields: [id_producto], references: [id_producto])
}

model Venta {
  id       Int      @id @default(autoincrement())
  pedidoId Int
  monto    Float
  fecha    DateTime
  pedido   Pedido   @relation(fields: [pedidoId], references: [id_pedido])
}

model TipoAsiento {
  id_tipo_asiento Int       @id @default(autoincrement())
  nombre          String    @unique // Ej: "Económica", "Premium Economy", "Business", "Primera"
  descripcion     String?
  // pasajes         Pasaje[] // Esta relación se eliminará al modificar Pasaje.
  asientosConfig  Asiento[] @relation("TipoAsientoBaseParaAsiento") // Asientos físicos que tienen este tipo como base. Renombrado para claridad.

  multiplicador_precio Decimal? @default(1.0) // Ej: Económica 1.0, Premium 1.2, Business 1.8, Primera 2.5
  // Nulo o 1.0 para la clase base/económica por defecto.
  // Si es nulo, se asume 1.0 en la lógica de cálculo.

  // Relación para PedidoItem donde este TipoAsiento es la clase de servicio seleccionada
  pedidoItemsComoClaseServicio PedidoItem[] @relation("ClaseServicioSeleccionada")
}

model AvionConfig {
  id_avion_config Int       @id @default(autoincrement())
  nombre_config   String    @unique // Ej: "Boeing 737 (150 asientos)", "Airbus A320 (180 asientos)"
  total_filas     Int
  columnas_config String // Ej: "ABC-DEF" (pasillo entre C y D), "AC-DFG-HK" (dos pasillos)
  asientos        Asiento[] // Relación con los asientos de esta configuración
  pasajes         Pasaje[] // Relación inversa con Pasajes que usan esta config
}

model Asiento {
  id_asiento            Int                        @id @default(autoincrement())
  id_avion_config       Int
  avionConfig           AvionConfig                @relation(fields: [id_avion_config], references: [id_avion_config])
  fila                  Int // Número de la fila
  columna               String // Letra de la columna, ej: "A", "F"
  id_tipo_asiento_base  Int
  tipoAsientoBase       TipoAsiento                @relation("TipoAsientoBaseParaAsiento", fields: [id_tipo_asiento_base], references: [id_tipo_asiento])
  caracteristicas       String[] // Ej: ["VENTANA", "PASILLO", "SALIDA_EMERGENCIA", "ESPACIO_EXTRA"]
  precio_adicional_base Decimal? // Costo adicional por características especiales (ej. salida de emergencia). Nulo si no tiene costo extra.
  selecciones_pasajeros SeleccionAsientoPasajero[] // Relación con las selecciones de este asiento

  @@unique([id_avion_config, fila, columna]) // Un asiento es único por su config, fila y columna
}

model SeleccionAsientoPasajero {
  id_seleccion_asiento Int        @id @default(autoincrement())
  id_pedido_item       Int        @unique // Un PedidoItem de vuelo solo puede tener una selección de asiento
  pedidoItem           PedidoItem @relation(fields: [id_pedido_item], references: [id_detalle])

  id_asiento_fisico Int // FK al Asiento físico elegido en el AvionConfig
  asientoFisico     Asiento @relation(fields: [id_asiento_fisico], references: [id_asiento])

  // El id_pasaje (vuelo específico) se infiere a través del PedidoItem -> Producto -> Pasaje.
  // Esto es para asegurar que el asiento seleccionado es válido para el AvionConfig del Pasaje.
  // Se podría añadir un campo redundante id_pasaje si se considera necesario para queries directas,
  // pero la validación se haría en la lógica de negocio.

  precio_seleccion_asiento Decimal // El costo adicional incurrido por esta selección específica en el momento de la reserva.
  // Este podría ser el Asiento.precio_adicional_base u otro calculado.
  fecha_seleccion          DateTime @default(now())

  // Considerar constraint para asegurar que el asiento no esté ocupado en el mismo vuelo (Pasaje)
  // Esto es más complejo y podría manejarse en la lógica de aplicación o con constraints más avanzados si Prisma lo soporta bien.
  // Por ahora, la unicidad del asiento para un vuelo se manejará en la lógica de negocio al momento de la selección.
}

model OpcionEquipaje {
  id_opcion_equipaje   Int                         @id @default(autoincrement())
  nombre               String                      @unique // Ej: "Maleta documentada 23kg", "Equipaje de mano extra", "Equipo deportivo"
  descripcion          String?
  precio_adicional     Decimal // Precio por esta opción de equipaje
  peso_maximo_kg       Int? // Peso máximo permitido para esta opción
  dimensiones_maximas  String? // Ej: "158cm lineales (alto+ancho+profundidad)"
  activo               Boolean                     @default(true) // Para poder desactivar opciones sin borrarlas
  selecciones_equipaje SeleccionEquipajePasajero[]
}

model SeleccionEquipajePasajero {
  id_seleccion_equipaje Int        @id @default(autoincrement())
  id_pedido_item        Int
  pedidoItem            PedidoItem @relation(fields: [id_pedido_item], references: [id_detalle])

  id_opcion_equipaje Int
  opcionEquipaje     OpcionEquipaje @relation(fields: [id_opcion_equipaje], references: [id_opcion_equipaje])

  cantidad                  Int      @default(1) // Cuántas unidades de esta opción de equipaje (ej. 2 maletas de 23kg)
  precio_seleccion_equipaje Decimal // Precio total por esta selección (opcionEquipaje.precio_adicional * cantidad)
  fecha_seleccion           DateTime @default(now())

  @@unique([id_pedido_item, id_opcion_equipaje]) // Un pasajero no debería poder añadir la misma opción exacta dos veces como registros separados para el mismo item; se actualiza la cantidad.
}
